@import java.util.Map
@import java.util.List
@import com.networknt.codegen.rest.OpenApiLambdaGenerator.OpenApiPath;
@import com.networknt.codegen.rest.OpenApiLambdaGenerator.MethodFunction;
@args (String projectName, String handlerPackage, boolean packageDocker, boolean useLightProxy, List<Map<String, Object>> operationList, List<OpenApiPath> pathList)
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  @projectName

  Sample SAM Template for @projectName

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20

Resources:
  @if(!useLightProxy){
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        components:
          securitySchemes:
            jwt-authorizer:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                identitySource: method.request.header.Authorization
                type: request
                authorizerUri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:964637446810:function:Authorizer/invocations
                authorizerResultTtlInSeconds: 0
        paths:
          @for(ap: pathList){
          @ap.getPath():
            @for(mf: ap.getMethodList()){
            @with(s = mf.getMethod()){@s}:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  @with(s = "Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${" + mf.getFunctionName() + ".Arn}/invocations"){@s}
              responses: {}
              security:
                - jwt-authorizer: []
            }
          }
  }
  @for(op : operationList) {
  @with(s = op.get("functionName") + ":"){@s}
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      @if(packageDocker) {
      PackageType: Image
      } else {
      @with(s = op.get("functionName")){CodeUri: @s}
      @with(s = handlerPackage + ".App::handleRequest"){Handler: @s}
      Runtime: java11
      MemorySize: 512
      FunctionName: @with(s = op.get("functionName")){@s}
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
      }
      Events:
        @with(s = op.get("apiName") + ":"){@s}
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            @with(s = op.get("path")){Path: @s}
            @with(s = op.get("method")){Method: @s}
            @if(!useLightProxy){
            RestApiId:
              Ref: ApiGateway
            }
    @if(packageDocker) {
    Metadata:
      DockerTag: java11-maven-v1
      DockerContext: ./@with(s = op.get("functionName")){@s}
      Dockerfile: Dockerfile
    }
  }
  @if(!useLightProxy){
  AuthorizerPerm:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: arn:aws:lambda:us-east-2:964637446810:function:Authorizer
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Sub': 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*'
  }