@import com.fasterxml.jackson.databind.JsonNode
@args (JsonNode config)
plugins {
    application
}

application {
    mainClassName = "com.networknt.sever.Server"
}

dependencies {
    implementation(project(":model"))
    implementation(project(":service"))
    val light4jVersion: String by project
    implementation("com.networknt", "config", light4jVersion)
    implementation("com.networknt", "utility", light4jVersion)
    implementation("com.networknt", "security", light4jVersion)
    implementation("com.networknt", "client", light4jVersion)
    implementation("com.networknt", "audit", light4jVersion)
    implementation("com.networknt", "info", light4jVersion)
    implementation("com.networknt", "health", light4jVersion)
    implementation("com.networknt", "status", light4jVersion)
    implementation("com.networknt", "exception", light4jVersion)
    implementation("com.networknt", "body", light4jVersion)
    implementation("com.networknt", "dump", light4jVersion)
    implementation("com.networknt", "mask", light4jVersion)
    @if(config.get("prometheusMetrics").booleanValue()){
    implementation("com.networknt", "prometheus", light4jVersion)
    }else{
    implementation("com.networknt", "metrics", light4jVersion)
    }
    implementation("com.networknt", "handler", light4jVersion)
    implementation("com.networknt", "sanitizer", light4jVersion)
    implementation("com.networknt", "traceability", light4jVersion)
    implementation("com.networknt", "correlation", light4jVersion)
    implementation("com.networknt", "service", light4jVersion)
    implementation("com.networknt", "registry", light4jVersion)
    implementation("com.networknt", "balance", light4jVersion)
    implementation("com.networknt", "cluster", light4jVersion)
    implementation("com.networknt", "portal-registry", light4jVersion)
    implementation("com.networknt", "logger-config", light4jVersion)
    implementation("com.networknt", "decryptor", light4jVersion)
    implementation("com.networknt", "server", light4jVersion)
    implementation("com.networknt", "openapi-parser", light4jVersion)
    implementation("com.networknt", "openapi-meta", light4jVersion)
    implementation("com.networknt", "openapi-security", light4jVersion)
    implementation("com.networknt", "openapi-validator", light4jVersion)
    implementation("com.networknt", "specification", light4jVersion)
    implementation("com.networknt", "http-entity", light4jVersion)
    @if(config.get("kafkaProducer").booleanValue() ||config.get("kafkaConsumer").booleanValue()){
    implementation("com.networknt", "kafka-common", light4jVersion)
    }
    @if(config.get("kafkaProducer").booleanValue()){
    implementation("com.networknt", "kafka-producer", light4jVersion)
    }
    @if(config.get("kafkaConsumer").booleanValue()){
    implementation("com.networknt", "kafka-consumer", light4jVersion)
    implementation("com.networknt", "kafka-streams", light4jVersion)
    }
    val jacksonVersion: String by project
    implementation("com.fasterxml.jackson.core", "jackson-databind", jacksonVersion)
    val jsonSchemaValidatorVersion: String by project
    implementation("com.networknt", "json-schema-validator", jsonSchemaValidatorVersion)
    val logbackVersion: String by project
    implementation("ch.qos.logback", "logback-classic", logbackVersion)
    val undertowVersion: String by project
    implementation("io.undertow", "undertow-core", undertowVersion)
    @if(config.get("supportDb").booleanValue() || config.get("supportH2ForTest").booleanValue()){
    val hikaricpVersion: String by project
    implementation("com.zaxxer", "HikariCP", hikaricpVersion)
    }
    @if(config.get("supportDb").booleanValue() && "oracle".equalsIgnoreCase(config.path("dbInfo").path("name").textValue())){
    val oracleVersion: String by project
    implementation("com.oracle", "ojdbc6", oracleVersion)
    }
    @if(config.get("supportDb").booleanValue() && "mysql".equalsIgnoreCase(config.path("dbInfo").path("name").textValue())){
    val mysqlVersion: String by project
    implementation("mysql", "mysql-connector-java", mysqlVersion)
    }
    @if(config.get("supportDb").booleanValue() && "postgres".equalsIgnoreCase(config.path("dbInfo").path("name").textValue())){
    val postgresVersion: String by project
    implementation("org.postgresql", "postgresql", postgresVersion)
    }
    @if(config.get("supportAvro").booleanValue()){
    val avroVersion: String by project
    implementation("io.confluent", "kafka-schema-registry-client", avroVersion)
    }
    val junitVersion: String by project
    testImplementation("junit", "junit", junitVersion)
    @if(config.get("supportH2ForTest").booleanValue()){
    val h2Version: String by project
    testImplementation("com.h2database", "h2", h2Version)
    }
}

val fatJar = task("fatJar", type = Jar::class) {
    baseName = "${project.name}-fat"
    manifest {
        attributes["Implementation-Title"] = "Gradle Jar File Example"
        attributes["Implementation-Version"] = version
        attributes["Main-Class"] = "com.networknt.server.Server"
    }
    from(configurations.runtime.get().map({ if (it.isDirectory) it else zipTree(it) }))
    with(tasks["jar"] as CopySpec)
}

tasks {
    "build" {
        dependsOn(fatJar)
    }
}
