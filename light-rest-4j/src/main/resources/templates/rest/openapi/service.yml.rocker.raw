@import com.fasterxml.jackson.databind.JsonNode
@args (JsonNode config)
# Singleton service factory configuration/IoC injection
singletons:
- com.networknt.registry.URL:
  - com.networknt.registry.URLImpl:
      protocol: light
      host: localhost
      port: 8080
      path: portal
      parameters:
        registryRetryPeriod: '30000'
- com.networknt.portal.registry.client.PortalRegistryClient:
  - com.networknt.portal.registry.client.PortalRegistryClientImpl
- com.networknt.registry.Registry:
  - com.networknt.portal.registry.PortalRegistry
- com.networknt.balance.LoadBalance:
  - com.networknt.balance.RoundRobinLoadBalance
- com.networknt.cluster.Cluster:
  - com.networknt.cluster.LightCluster
# StartupHookProvider implementations, there are one to many and they are called in the same sequence defined.
- com.networknt.server.StartupHookProvider:
  @if(config.get("kafkaProducer").booleanValue()){
  # Kafka producer startup hook example
  # - net.lightapi.portal.user.command.UserCommandStartup
  }
  @if(config.get("kafkaConsumer").booleanValue()){
  # Kafka consumer startup hook example
  # - net.lightapi.portal.user.query.UserQueryStartup
  }
# ShutdownHookProvider implementations, there are one to many and they are called in the same sequence defined.
- com.networknt.server.ShutdownHookProvider:
  @if(config.get("kafkaProducer").booleanValue()){
  # Kafka producer startup hook example
  # - net.lightapi.portal.user.command.UserCommandShutdown
  }
  @if(config.get("kafkaConsumer").booleanValue()){
  # Kafka consumer startup hook example
  # - net.lightapi.portal.user.query.UserQueryShutdown
  }
@if(config.get("kafkaProducer").booleanValue()){
- com.networknt.kafka.producer.LightProducer:
  - com.networknt.kafka.producer.TransactionalProducer
}
@if(config.get("kafkaConsumer").booleanValue()){
- com.networknt.kafka.streams.LightStreams:
  # Kafka streams processor example
  # - net.lightapi.portal.user.query.UserQueryStreams
}
@if(config.get("supportDb").booleanValue()){
@with (driverClassName = config.path("dbInfo").path("driverClassName").textValue(), jdbcUrl=config.path("dbInfo").path("jdbcUrl").textValue(), username=config.path("dbInfo").path("username").textValue(), password=config.path("dbInfo").path("password").textValue()) {
- javax.sql.DataSource:
  - com.zaxxer.hikari.HikariDataSource:
      DriverClassName: @driverClassName
      jdbcUrl: @jdbcUrl
      username: @username
      password: @password
      maximumPoolSize: 10
      useServerPrepStmts: true
      cachePrepStmts: true
      cacheCallableStmts: true
      prepStmtCacheSize: 10
      prepStmtCacheSqlLimit: 2048
      connectionTimeout: 2000
}
}
