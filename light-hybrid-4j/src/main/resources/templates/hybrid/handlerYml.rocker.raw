@import java.util.Map
@import java.util.List
@import com.jsoniter.any.Any
@args (String serviceId, String handlerPackage, String jsonPath, boolean prometheusMetrics, boolean healthCheck, boolean serverInfo)

# Handler middleware chain configuration
#----------------------------------------
enabled: true

# Configuration for the LightHttpHandler. The handler is the base class  for all middleware, server and health handlers
# set the Status Object in the AUDIT_INFO, for auditing purposes
# default, if not set:false
auditOnError: ${handler.auditOnError:false}

# set the StackTrace in the AUDIT_INFO, for auditing purposes
# default, if not set:false
auditStackTrace: ${handler.auditStackTrace:false}

#------------------------------------------------------------------------------
# Support individual handler chains for each separate endpoint. It allows framework
# handlers like health check, server info to bypass majority of the middleware handlers
# and allows mixing multiple frameworks like OpenAPI and GraphQL in the same instance.
#
# handlers  --  list of handlers to be used across chains in this microservice
#               including the routing handlers for ALL endpoints
#           --  format: fully qualified handler class name@@optional:given name
# chains    --  allows forming of [1..N] chains, which could be wholly or
#               used to form handler chains for each endpoint
#               ex.: default chain below, reused partially across multiple endpoints
# paths     --  list all the paths to be used for routing within the microservice
#           ----  path: the URI for the endpoint (ex.: path: '/v1/pets')
#           ----  method: the operation in use (ex.: 'post')
#           ----  exec: handlers to be executed -- this element forms the list and
#                       the order of execution for the handlers
#
# IMPORTANT NOTES:
# - to avoid executing a handler, it has to be removed/commented out in the chain
#   or change the enabled:boolean to false for a middleware handler configuration.
# - all handlers, routing handler included, are to be listed in the execution chain
# - for consistency, give a name to each handler; it is easier to refer to a name
#   vs a fully qualified class name and is more elegant
# - you can list in chains the fully qualified handler class names, and avoid using the
#   handlers element altogether
#------------------------------------------------------------------------------
handlers:
  # Light-framework cross-cutting concerns implemented in the microservice
  - com.networknt.exception.ExceptionHandler@@exception
@if(prometheusMetrics){  - com.networknt.metrics.prometheus.PrometheusHandler@@prometheus} else {  - com.networknt.metrics.MetricsHandler@@metrics}
  # - com.networknt.traceability.TraceabilityHandler@@traceability
  # - com.networknt.correlation.CorrelationHandler@@correlation
  - com.networknt.jaeger.tracing.JaegerHandler@@jaeger
  - com.networknt.cors.CorsHttpHandler@@cors
  # - com.networknt.audit.AuditHandler@@audit
  # DumpHandler is to dump detail request/response info to log, useful for troubleshooting but not suggested to use in production due to it may lower the performance
  # - com.networknt.dump.DumpHandler@@dump
  # - com.networknt.sanitizer.SanitizerHandler@@sanitizer
  - com.networknt.rpc.router.JsonHandler@@json
  # Customer business domain specific cross-cutting concerns handlers
  # - com.example.validator.CustomizedValidator@@custvalidator
  # Framework endpoint handlers
  - com.networknt.health.HealthGetHandler@@health
  - com.networknt.info.ServerInfoGetHandler@@info
  # Business Handlers

chains:
  default:
    - exception
@if(prometheusMetrics){    - prometheus} else {    - metrics}
    # - traceability
    # - correlation
    - jaeger
    # - dump
    - cors
    - json

paths:
  - path: '@jsonPath'
    method: 'POST'
    exec:
      - default

  - path: '@jsonPath'
    method: 'GET'
    exec:
      - default

@if(healthCheck){  - path: '/health/${server.serviceId:@serviceId}'
    method: 'get'
    exec:
      - health
}
@if(serverInfo){  - path: '/server/info'
    method: 'get'
    exec:
      - info
}
@if(prometheusMetrics){  - path: '/prometheus'
    method: 'get'
    exec:
      - getprometheus
}
